##
#	\namespace	mxscustattribdef.py
#
#	\remarks	Defines a class system for defining and accessing maxscript custom parameters
#	
#	\author		beta@blur.com
#	\author		Blur Studio
#	\date		10/25/10
#

from Py3dsMax import mxs

maxscript = """
global %(class)sAttr = attributes "%(name)s" version:%(classVersion)s (
	parameters main (
		%(parameters)s
	)
	%(controls)s
)
"""

#-----------------------------------------------------------------------------

class MXSCustParam:
	def __init__( self, paramId, paramName, paramType, control, animatable, default, tabSizeVariable ):
		self.paramId			= paramId
		self.paramName			= paramName
		self.paramType 			= paramType
		self.control			= control
		self.default			= default
		self.tabSizeVariable	= tabSizeVariable
		self.animatable			= animatable
	
	def defString( self ):
		output = [ self.paramId ]
		output.append( 'type:#%s' % self.paramType )
		output.append( 'animatable:%s' % self.animatable )
		
		if ( self.default ):
			if ( self.paramType == 'string' ):
				output.append( 'default:"%s"' % self.default )
			else:
				output.append( 'default:%s' % self.default )
		
		if ( self.control ):
			output.append( 'ui:#%s' % self.control )
		
		if ( self.paramType.endswith( 'Tab' ) and self.tabSizeVariable ):
			output.append( 'tabSizeVariable:%s' % self.tabSizeVariable )
		
		return ' '.join( output )

#-----------------------------------------------------------------------------

class MXSCustAttribDef:
	__version__		= 1
	
	_attrName		= ''
	_mxsDef			= None
	_paramDefs		= {}
	_controlDefs	= {}
	
	def __init__( self, mxsInstance ):
		self._mxsInstance = mxsInstance
	
	def init( self ):
		pass
	
	def isNull( self ):
		return self._mxsInstance == None
	
	def mxsInstance( self ):
		return self._mxsInstance
	
	def setValue( self, key, value ):
		if ( not self._mxsInstance ):
			return False
		
		key = str( key )
		if ( key in self._paramDefs ):
			mxs.setProperty( self._mxsInstance, self._paramDefs[key].paramId, value )
			return True
		return False
	
	def value( self, key, fail = None ):
		if ( not self._mxsInstance ):
			return fail
		
		key = str( key )
		if ( key in self._paramDefs ):
			return mxs.getProperty( self._mxsInstance, self._paramDefs[key].paramId )
		return fail
	
	#-----------------------------------------------------------------------------
	
	@classmethod
	def clear( cls ):
		cls.__dict__[ '_paramDefs' ] 	= {}
		cls.__dict__[ '_controlDefs' ] 	= {}
	
	@classmethod
	def count( cls, object ):
		# remove from the item
		count 		= mxs.custAttributes.count( object )
		get_attr 	= mxs.custAttributes.get
		attr_count	= 0
		attrName	= cls.attrName()
		for i in range( count ):
			attr = get_attr( object, i + 1 )
			if ( attr and attr.name == attrname ):
				attr_count += 1
		return attr_count
	
	@classmethod
	def create( cls, object ):
		mxsDef = cls.mxsDef()
		if ( not mxsDef ):
			return cls(None)
		
		output = cls.find(object)
		if ( not output ):
			cls(mxs.custAttributes.add(object,mxsDef))
			output = cls.find(object)
			output.init()
		return output
	
	@classmethod
	def createUnique( cls, object ):
		mxsDef = cls.mxsDef()
		if ( not mxsDef ):
			return cls(None)
		
		count = mxs.custAttributes.count( object )
		mxs.custAttributes.add( object, mxsDef )
		mxs.custAttributes.makeUnique( object, count + 1 )
		output = cls(mxs.custAttributes.get( object, count + 1 ))
		output.init()
		return output
		
	@classmethod
	def defineParam( cls, paramName, paramType, control = '', animatable = False, default = None, paramId = '', tabSizeVariable = True ):
		paramName = str(paramName)
		if ( not paramId ):
			import re
			results = re.findall( '([A-Z])', str(paramName) )
			paramId = paramName[0] + ''.join( results )
			
		cls._paramDefs[paramName] = MXSCustParam( paramId, paramName, paramType, control, animatable, default, tabSizeVariable )
	
	@classmethod
	def defineControl( cls, controlName, controlType ):
		pass
	
	@classmethod
	def define( cls ):
		pass
	
	@classmethod
	def find( cls, object ):
		# look up the attributes
		count = mxs.custAttributes.count( object )
		get_attr = mxs.custAttributes.get
		attrname = cls.attrName()
		for i in range( count ):
			attr = get_attr( object, i + 1 )
			if ( attr and attr.name == attrname ):
				return cls(attr)
		return None
	
	@classmethod
	def remove( cls, object ):
		# remove from the item
		count 		= mxs.custAttributes.count( object )
		get_attr 	= mxs.custAttributes.get
		rem_attr 	= mxs.custAttributes.delete
		rem_count	= 0
		attrname	= cls.attrName()
		
		for i in range( count - 1, -1, -1 ):
			attr = get_attr( object, i + 1 )
			if ( attr and attr.name == attrname ):
				rem_attr( object, i + 1 )
				rem_count += 1
		return rem_count
	
	@classmethod
	def attrName( cls ):
		if ( not cls._attrName ):
			return cls.__name__
		return cls._attrName
	
	@classmethod
	def mxsDef( cls ):
		if ( not cls._mxsDef ):
			cls._mxsDef = getattr( mxs, cls.__name__ + 'Attr' )
		return cls._mxsDef
	
	@classmethod
	def setAttrName( cls, name ):
		cls._attrName = name
	
	@classmethod
	def register( cls ):
		# clear the old defs
		cls.clear()
		
		# define the class
		cls.define()
		
		# create the maxscript for this class and run it
		data = { 'class': cls.__name__, 'name': cls.attrName(), 'classVersion': cls.__version__, 'parameters': '', 'controls': '' }
			
		# create the parameters
		paramstr = []
		for param in cls._paramDefs.values():
			paramstr.append( param.defString() )
		
		data[ 'parameters' ] = '\n'.join( paramstr )
		
		mscript = maxscript % data
		mxs.execute( mscript )